{

module Lexer

// Opens methods related to fslex.exe
open Microsoft.FSharp.Text.Lexing
open System

let newline (lexbuf: LexBuffer<_>) = 
  lexbuf.StartPos <- lexbuf.StartPos.NextLine

}

// Regular expressions
let whitespace = [' ' '\t' ]
let newline = ('\n' | '\r' '\n')
let digit       = ['0'-'9']   
let letters		= ['a'-'z' 'A'-'Z']+
let int         = digit+   
let plus		= '+'
let minus		= '-'

rule tokenstream = parse
// --------------------------
| "d"		{ Parser.DSymbol }
| "min"		{ Parser.Min }
| "max" 	{ Parser.Max }
| "adv" 	{ Parser.Advantage }
| "disadv" 	{ Parser.Disadvantage }
| int		{ Parser.Number (Int32.Parse(LexBuffer<_>.LexemeString lexbuf)) }
| plus		{ Parser.Plus }
| minus		{ Parser.Minus }
| "."		{ Parser.Dot }
| ","		{ Parser.Comma }
| "("		{ Parser.OpenParen }
| ")"		{ Parser.CloseParen }
| "?"		{ Parser.QuestionMark }
// --------------------------
| whitespace	{ tokenstream lexbuf }
| newline	{ newline lexbuf; tokenstream lexbuf }
// --------------------------
| _    		{ failwith ("ParseError" + LexBuffer<_>.LexemeString lexbuf) }
| eof   	{ Parser.EOF }