%{


%}

// The start token becomes a parser function in the compiled code:
%start start

// Misc tokens
%token EOF

%token <int> Number
%token DSymbol
%token Plus
%token Minus
%token Dot
%token Min
%token Max
%token Advantage
%token Disadvantage
%token Comma
%token OpenParen
%token CloseParen
%token QuestionMark

// This is the type of the data produced by a successful reduction of the 'start'
// symbol:
%type < Rolls.RollSpec > start

%%

// These are the rules of the grammar along with the F# code of the 
// actions executed as rules are reduced.  
start: MultiRoll EOF { $1 }

MultiRoll:
	| Number Dot Roll { Rolls.Repeat($1, $3) }
	| Roll { $1 }

Roll:
	| PlusList { $1 }
	| Min RollList { Rolls.Min($2) }
	| Max RollList { Rolls.Max($2) }
	| Roll QuestionMark Number { Rolls.AtLeast($1, $3) }
	
RollList:
	| SimpleRoll Comma RollList { List.append [$1] $3 }
	| SimpleRoll { [$1] }

PlusList:
	| SimpleRoll { $1 }
	| SimpleRoll Plus PlusList { Rolls.MakeSum($1, $3) }
	| SimpleRoll Minus PlusList { Rolls.MakeSubtract($1, $3) }

SimpleRoll:
	| Number						{ Rolls.Roll(0, 0, $1) }
	| Number DSymbol				{ Rolls.Roll($1, 6, 0) }
	| Number DSymbol Number	{ Rolls.Roll($1, $3, 0) }
	| DSymbol Number 			    { Rolls.Roll(1, $2, 0) }
	| SimpleRoll Advantage					{ Rolls.Max [$1; $1] }
	| SimpleRoll Disadvantage				{ Rolls.Min [$1; $1] }

