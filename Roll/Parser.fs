// Implementation file for parser generated by fsyacc
module Parser
#nowarn "64";; // turn off warnings that type variables used in production annotations are instantiated to concrete type
open Microsoft.FSharp.Text.Lexing
open Microsoft.FSharp.Text.Parsing.ParseHelpers
# 1 "Parser.fsy"




# 11 "Parser.fs"
// This type is the type of tokens accepted by the parser
type token = 
  | String of (string)
  | Ident of (string)
  | Delete
  | Kill
  | Delay
  | Resolve
  | Declare
  | Sub
  | Add
  | Print
  | Set
  | Quit
  | QuestionMark
  | CloseParen
  | OpenParen
  | Comma
  | Disadvantage
  | Advantage
  | Max
  | Min
  | Dot
  | Minus
  | Plus
  | DSymbol
  | Number of (int)
  | EOF
// This type is used to give symbolic names to token indexes, useful for error messages
type tokenId = 
    | TOKEN_String
    | TOKEN_Ident
    | TOKEN_Delete
    | TOKEN_Kill
    | TOKEN_Delay
    | TOKEN_Resolve
    | TOKEN_Declare
    | TOKEN_Sub
    | TOKEN_Add
    | TOKEN_Print
    | TOKEN_Set
    | TOKEN_Quit
    | TOKEN_QuestionMark
    | TOKEN_CloseParen
    | TOKEN_OpenParen
    | TOKEN_Comma
    | TOKEN_Disadvantage
    | TOKEN_Advantage
    | TOKEN_Max
    | TOKEN_Min
    | TOKEN_Dot
    | TOKEN_Minus
    | TOKEN_Plus
    | TOKEN_DSymbol
    | TOKEN_Number
    | TOKEN_EOF
    | TOKEN_end_of_input
    | TOKEN_error
// This type is used to give symbolic names to token indexes, useful for error messages
type nonTerminalId = 
    | NONTERM__startstart
    | NONTERM_start
    | NONTERM_Command
    | NONTERM_ID
    | NONTERM_SetValue
    | NONTERM_PrintValue
    | NONTERM_MultiRoll
    | NONTERM_MaybeTest
    | NONTERM_Roll
    | NONTERM_RollList
    | NONTERM_PlusList
    | NONTERM_SimpleRoll

// This function maps tokens to integer indexes
let tagOfToken (t:token) = 
  match t with
  | String _ -> 0 
  | Ident _ -> 1 
  | Delete  -> 2 
  | Kill  -> 3 
  | Delay  -> 4 
  | Resolve  -> 5 
  | Declare  -> 6 
  | Sub  -> 7 
  | Add  -> 8 
  | Print  -> 9 
  | Set  -> 10 
  | Quit  -> 11 
  | QuestionMark  -> 12 
  | CloseParen  -> 13 
  | OpenParen  -> 14 
  | Comma  -> 15 
  | Disadvantage  -> 16 
  | Advantage  -> 17 
  | Max  -> 18 
  | Min  -> 19 
  | Dot  -> 20 
  | Minus  -> 21 
  | Plus  -> 22 
  | DSymbol  -> 23 
  | Number _ -> 24 
  | EOF  -> 25 

// This function maps integer indexes to symbolic token ids
let tokenTagToTokenId (tokenIdx:int) = 
  match tokenIdx with
  | 0 -> TOKEN_String 
  | 1 -> TOKEN_Ident 
  | 2 -> TOKEN_Delete 
  | 3 -> TOKEN_Kill 
  | 4 -> TOKEN_Delay 
  | 5 -> TOKEN_Resolve 
  | 6 -> TOKEN_Declare 
  | 7 -> TOKEN_Sub 
  | 8 -> TOKEN_Add 
  | 9 -> TOKEN_Print 
  | 10 -> TOKEN_Set 
  | 11 -> TOKEN_Quit 
  | 12 -> TOKEN_QuestionMark 
  | 13 -> TOKEN_CloseParen 
  | 14 -> TOKEN_OpenParen 
  | 15 -> TOKEN_Comma 
  | 16 -> TOKEN_Disadvantage 
  | 17 -> TOKEN_Advantage 
  | 18 -> TOKEN_Max 
  | 19 -> TOKEN_Min 
  | 20 -> TOKEN_Dot 
  | 21 -> TOKEN_Minus 
  | 22 -> TOKEN_Plus 
  | 23 -> TOKEN_DSymbol 
  | 24 -> TOKEN_Number 
  | 25 -> TOKEN_EOF 
  | 28 -> TOKEN_end_of_input
  | 26 -> TOKEN_error
  | _ -> failwith "tokenTagToTokenId: bad token"

/// This function maps production indexes returned in syntax errors to strings representing the non terminal that would be produced by that production
let prodIdxToNonTerminal (prodIdx:int) = 
  match prodIdx with
    | 0 -> NONTERM__startstart 
    | 1 -> NONTERM_start 
    | 2 -> NONTERM_Command 
    | 3 -> NONTERM_Command 
    | 4 -> NONTERM_Command 
    | 5 -> NONTERM_Command 
    | 6 -> NONTERM_Command 
    | 7 -> NONTERM_Command 
    | 8 -> NONTERM_Command 
    | 9 -> NONTERM_Command 
    | 10 -> NONTERM_Command 
    | 11 -> NONTERM_Command 
    | 12 -> NONTERM_Command 
    | 13 -> NONTERM_ID 
    | 14 -> NONTERM_ID 
    | 15 -> NONTERM_ID 
    | 16 -> NONTERM_SetValue 
    | 17 -> NONTERM_SetValue 
    | 18 -> NONTERM_SetValue 
    | 19 -> NONTERM_SetValue 
    | 20 -> NONTERM_SetValue 
    | 21 -> NONTERM_SetValue 
    | 22 -> NONTERM_SetValue 
    | 23 -> NONTERM_PrintValue 
    | 24 -> NONTERM_PrintValue 
    | 25 -> NONTERM_PrintValue 
    | 26 -> NONTERM_MultiRoll 
    | 27 -> NONTERM_MultiRoll 
    | 28 -> NONTERM_MaybeTest 
    | 29 -> NONTERM_MaybeTest 
    | 30 -> NONTERM_MaybeTest 
    | 31 -> NONTERM_Roll 
    | 32 -> NONTERM_Roll 
    | 33 -> NONTERM_Roll 
    | 34 -> NONTERM_RollList 
    | 35 -> NONTERM_RollList 
    | 36 -> NONTERM_PlusList 
    | 37 -> NONTERM_PlusList 
    | 38 -> NONTERM_PlusList 
    | 39 -> NONTERM_SimpleRoll 
    | 40 -> NONTERM_SimpleRoll 
    | 41 -> NONTERM_SimpleRoll 
    | 42 -> NONTERM_SimpleRoll 
    | 43 -> NONTERM_SimpleRoll 
    | 44 -> NONTERM_SimpleRoll 
    | _ -> failwith "prodIdxToNonTerminal: bad production index"

let _fsyacc_endOfInputTag = 28 
let _fsyacc_tagOfErrorTerminal = 26

// This function gets the name of a token as a string
let token_to_string (t:token) = 
  match t with 
  | String _ -> "String" 
  | Ident _ -> "Ident" 
  | Delete  -> "Delete" 
  | Kill  -> "Kill" 
  | Delay  -> "Delay" 
  | Resolve  -> "Resolve" 
  | Declare  -> "Declare" 
  | Sub  -> "Sub" 
  | Add  -> "Add" 
  | Print  -> "Print" 
  | Set  -> "Set" 
  | Quit  -> "Quit" 
  | QuestionMark  -> "QuestionMark" 
  | CloseParen  -> "CloseParen" 
  | OpenParen  -> "OpenParen" 
  | Comma  -> "Comma" 
  | Disadvantage  -> "Disadvantage" 
  | Advantage  -> "Advantage" 
  | Max  -> "Max" 
  | Min  -> "Min" 
  | Dot  -> "Dot" 
  | Minus  -> "Minus" 
  | Plus  -> "Plus" 
  | DSymbol  -> "DSymbol" 
  | Number _ -> "Number" 
  | EOF  -> "EOF" 

// This function gets the data carried by a token as an object
let _fsyacc_dataOfToken (t:token) = 
  match t with 
  | String _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | Ident _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | Delete  -> (null : System.Object) 
  | Kill  -> (null : System.Object) 
  | Delay  -> (null : System.Object) 
  | Resolve  -> (null : System.Object) 
  | Declare  -> (null : System.Object) 
  | Sub  -> (null : System.Object) 
  | Add  -> (null : System.Object) 
  | Print  -> (null : System.Object) 
  | Set  -> (null : System.Object) 
  | Quit  -> (null : System.Object) 
  | QuestionMark  -> (null : System.Object) 
  | CloseParen  -> (null : System.Object) 
  | OpenParen  -> (null : System.Object) 
  | Comma  -> (null : System.Object) 
  | Disadvantage  -> (null : System.Object) 
  | Advantage  -> (null : System.Object) 
  | Max  -> (null : System.Object) 
  | Min  -> (null : System.Object) 
  | Dot  -> (null : System.Object) 
  | Minus  -> (null : System.Object) 
  | Plus  -> (null : System.Object) 
  | DSymbol  -> (null : System.Object) 
  | Number _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | EOF  -> (null : System.Object) 
let _fsyacc_gotos = [| 0us; 65535us; 1us; 65535us; 0us; 1us; 1us; 65535us; 0us; 2us; 15us; 65535us; 8us; 9us; 10us; 11us; 11us; 12us; 13us; 14us; 15us; 16us; 17us; 18us; 22us; 23us; 23us; 24us; 24us; 25us; 26us; 27us; 27us; 28us; 31us; 32us; 32us; 33us; 36us; 37us; 37us; 38us; 1us; 65535us; 0us; 6us; 1us; 65535us; 0us; 7us; 1us; 65535us; 0us; 4us; 2us; 65535us; 0us; 42us; 40us; 41us; 2us; 65535us; 0us; 43us; 40us; 43us; 3us; 65535us; 50us; 51us; 52us; 53us; 55us; 56us; 4us; 65535us; 0us; 49us; 40us; 49us; 58us; 59us; 60us; 61us; 7us; 65535us; 0us; 57us; 40us; 57us; 50us; 54us; 52us; 54us; 55us; 54us; 58us; 57us; 60us; 57us; |]
let _fsyacc_sparseGotoTableRowOffsets = [|0us; 1us; 3us; 5us; 21us; 23us; 25us; 27us; 30us; 33us; 37us; 42us; |]
let _fsyacc_stateToProdIdxsTableElements = [| 1us; 0us; 1us; 0us; 1us; 1us; 1us; 1us; 1us; 2us; 1us; 3us; 1us; 4us; 1us; 5us; 2us; 6us; 7us; 1us; 7us; 1us; 8us; 1us; 8us; 1us; 8us; 2us; 9us; 10us; 1us; 10us; 1us; 11us; 1us; 11us; 1us; 12us; 1us; 12us; 2us; 13us; 14us; 1us; 14us; 1us; 15us; 3us; 16us; 17us; 18us; 3us; 16us; 17us; 18us; 2us; 17us; 18us; 1us; 18us; 2us; 19us; 20us; 2us; 19us; 20us; 1us; 19us; 1us; 19us; 1us; 20us; 2us; 21us; 22us; 2us; 21us; 22us; 1us; 21us; 1us; 21us; 1us; 22us; 3us; 23us; 24us; 25us; 2us; 23us; 24us; 1us; 24us; 4us; 26us; 39us; 40us; 41us; 1us; 26us; 1us; 26us; 1us; 27us; 3us; 28us; 29us; 30us; 2us; 29us; 30us; 2us; 29us; 30us; 1us; 30us; 1us; 30us; 1us; 30us; 1us; 31us; 1us; 32us; 1us; 32us; 1us; 33us; 1us; 33us; 4us; 34us; 35us; 43us; 44us; 1us; 34us; 1us; 34us; 5us; 36us; 37us; 38us; 43us; 44us; 1us; 37us; 1us; 37us; 1us; 38us; 1us; 38us; 3us; 39us; 40us; 41us; 2us; 40us; 41us; 1us; 41us; 1us; 42us; 1us; 42us; 1us; 43us; 1us; 44us; |]
let _fsyacc_stateToProdIdxsTableRowOffsets = [|0us; 2us; 4us; 6us; 8us; 10us; 12us; 14us; 16us; 19us; 21us; 23us; 25us; 27us; 30us; 32us; 34us; 36us; 38us; 40us; 43us; 45us; 47us; 51us; 55us; 58us; 60us; 63us; 66us; 68us; 70us; 72us; 75us; 78us; 80us; 82us; 84us; 88us; 91us; 93us; 98us; 100us; 102us; 104us; 108us; 111us; 114us; 116us; 118us; 120us; 122us; 124us; 126us; 128us; 130us; 135us; 137us; 139us; 145us; 147us; 149us; 151us; 153us; 157us; 160us; 162us; 164us; 166us; 168us; |]
let _fsyacc_action_rows = 69
let _fsyacc_actionTableElements = [|14us; 32768us; 2us; 17us; 3us; 15us; 4us; 8us; 5us; 13us; 6us; 10us; 7us; 31us; 8us; 26us; 9us; 36us; 10us; 22us; 11us; 5us; 18us; 52us; 19us; 50us; 23us; 65us; 24us; 39us; 0us; 49152us; 1us; 32768us; 25us; 3us; 0us; 16385us; 0us; 16386us; 0us; 16387us; 0us; 16388us; 0us; 16389us; 2us; 16390us; 0us; 21us; 1us; 19us; 0us; 16391us; 2us; 32768us; 0us; 21us; 1us; 19us; 2us; 32768us; 0us; 21us; 1us; 19us; 0us; 16392us; 2us; 16393us; 0us; 21us; 1us; 19us; 0us; 16394us; 2us; 32768us; 0us; 21us; 1us; 19us; 0us; 16395us; 2us; 32768us; 0us; 21us; 1us; 19us; 0us; 16396us; 1us; 16397us; 24us; 20us; 0us; 16398us; 0us; 16399us; 2us; 32768us; 0us; 21us; 1us; 19us; 2us; 16400us; 0us; 21us; 1us; 19us; 2us; 16401us; 0us; 21us; 1us; 19us; 0us; 16402us; 2us; 32768us; 0us; 21us; 1us; 19us; 3us; 32768us; 0us; 21us; 1us; 19us; 24us; 30us; 1us; 32768us; 24us; 29us; 0us; 16403us; 0us; 16404us; 2us; 32768us; 0us; 21us; 1us; 19us; 3us; 32768us; 0us; 21us; 1us; 19us; 24us; 35us; 1us; 32768us; 24us; 34us; 0us; 16405us; 0us; 16406us; 2us; 16409us; 0us; 21us; 1us; 19us; 2us; 16407us; 0us; 21us; 1us; 19us; 0us; 16408us; 2us; 16423us; 20us; 40us; 23us; 63us; 4us; 32768us; 18us; 52us; 19us; 50us; 23us; 65us; 24us; 62us; 0us; 16410us; 0us; 16411us; 1us; 16412us; 12us; 44us; 1us; 32768us; 24us; 45us; 1us; 16413us; 14us; 46us; 1us; 32768us; 24us; 47us; 1us; 32768us; 13us; 48us; 0us; 16414us; 0us; 16415us; 2us; 32768us; 23us; 65us; 24us; 62us; 0us; 16416us; 2us; 32768us; 23us; 65us; 24us; 62us; 0us; 16417us; 3us; 16419us; 15us; 55us; 16us; 68us; 17us; 67us; 2us; 32768us; 23us; 65us; 24us; 62us; 0us; 16418us; 4us; 16420us; 16us; 68us; 17us; 67us; 21us; 60us; 22us; 58us; 2us; 32768us; 23us; 65us; 24us; 62us; 0us; 16421us; 2us; 32768us; 23us; 65us; 24us; 62us; 0us; 16422us; 1us; 16423us; 23us; 63us; 1us; 16424us; 24us; 64us; 0us; 16425us; 1us; 32768us; 24us; 66us; 0us; 16426us; 0us; 16427us; 0us; 16428us; |]
let _fsyacc_actionTableRowOffsets = [|0us; 15us; 16us; 18us; 19us; 20us; 21us; 22us; 23us; 26us; 27us; 30us; 33us; 34us; 37us; 38us; 41us; 42us; 45us; 46us; 48us; 49us; 50us; 53us; 56us; 59us; 60us; 63us; 67us; 69us; 70us; 71us; 74us; 78us; 80us; 81us; 82us; 85us; 88us; 89us; 92us; 97us; 98us; 99us; 101us; 103us; 105us; 107us; 109us; 110us; 111us; 114us; 115us; 118us; 119us; 123us; 126us; 127us; 132us; 135us; 136us; 139us; 140us; 142us; 144us; 145us; 147us; 148us; 149us; |]
let _fsyacc_reductionSymbolCounts = [|1us; 2us; 1us; 1us; 1us; 1us; 1us; 2us; 3us; 1us; 2us; 2us; 2us; 1us; 2us; 1us; 2us; 3us; 4us; 4us; 3us; 4us; 3us; 2us; 3us; 1us; 3us; 1us; 1us; 3us; 6us; 1us; 2us; 2us; 3us; 1us; 1us; 3us; 3us; 1us; 2us; 3us; 2us; 2us; 2us; |]
let _fsyacc_productionToNonTerminalTable = [|0us; 1us; 2us; 2us; 2us; 2us; 2us; 2us; 2us; 2us; 2us; 2us; 2us; 3us; 3us; 3us; 4us; 4us; 4us; 4us; 4us; 4us; 4us; 5us; 5us; 5us; 6us; 6us; 7us; 7us; 7us; 8us; 8us; 8us; 9us; 9us; 10us; 10us; 10us; 11us; 11us; 11us; 11us; 11us; 11us; |]
let _fsyacc_immediateActions = [|65535us; 49152us; 65535us; 16385us; 16386us; 16387us; 16388us; 16389us; 65535us; 16391us; 65535us; 65535us; 16392us; 65535us; 16394us; 65535us; 16395us; 65535us; 16396us; 65535us; 16398us; 16399us; 65535us; 65535us; 65535us; 16402us; 65535us; 65535us; 65535us; 16403us; 16404us; 65535us; 65535us; 65535us; 16405us; 16406us; 65535us; 65535us; 16408us; 65535us; 65535us; 16410us; 16411us; 65535us; 65535us; 65535us; 65535us; 65535us; 16414us; 16415us; 65535us; 16416us; 65535us; 16417us; 65535us; 65535us; 16418us; 65535us; 65535us; 16421us; 65535us; 16422us; 65535us; 65535us; 16425us; 65535us; 16426us; 16427us; 16428us; |]
let _fsyacc_reductions ()  =    [| 
# 271 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data :  Statements.Command )) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                      raise (Microsoft.FSharp.Text.Parsing.Accept(Microsoft.FSharp.Core.Operators.box _1))
                   )
                 : '_startstart));
# 280 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Command)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 46 "Parser.fsy"
                                          _1 
                   )
# 46 "Parser.fsy"
                 :  Statements.Command ));
# 291 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'MultiRoll)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 49 "Parser.fsy"
                                    Statements.RollCommand(_1) 
                   )
# 49 "Parser.fsy"
                 : 'Command));
# 302 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 50 "Parser.fsy"
                               Statements.QuitCommand 
                   )
# 50 "Parser.fsy"
                 : 'Command));
# 312 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'SetValue)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 51 "Parser.fsy"
                                   _1 
                   )
# 51 "Parser.fsy"
                 : 'Command));
# 323 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'PrintValue)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 52 "Parser.fsy"
                                     _1 
                   )
# 52 "Parser.fsy"
                 : 'Command));
# 334 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 53 "Parser.fsy"
                                Statements.Delay None 
                   )
# 53 "Parser.fsy"
                 : 'Command));
# 344 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'ID)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 54 "Parser.fsy"
                                   Statements.Delay (Some _2) 
                   )
# 54 "Parser.fsy"
                 : 'Command));
# 355 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'ID)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'ID)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 55 "Parser.fsy"
                                        Statements.SetValue(Some _2, "action", _3) 
                   )
# 55 "Parser.fsy"
                 : 'Command));
# 367 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 56 "Parser.fsy"
                                  Statements.ResolveAction(None) 
                   )
# 56 "Parser.fsy"
                 : 'Command));
# 377 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'ID)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 57 "Parser.fsy"
                                     Statements.ResolveAction(Some _2) 
                   )
# 57 "Parser.fsy"
                 : 'Command));
# 388 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'ID)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 58 "Parser.fsy"
                                  Statements.Delete(_2) 
                   )
# 58 "Parser.fsy"
                 : 'Command));
# 399 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'ID)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 59 "Parser.fsy"
                                    Statements.Delete(_2) 
                   )
# 59 "Parser.fsy"
                 : 'Command));
# 410 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 62 "Parser.fsy"
                                _1 
                   )
# 62 "Parser.fsy"
                 : 'ID));
# 421 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : int)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 63 "Parser.fsy"
                                       _1 + (_2.ToString()) 
                   )
# 63 "Parser.fsy"
                 : 'ID));
# 433 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 64 "Parser.fsy"
                                 _1 
                   )
# 64 "Parser.fsy"
                 : 'ID));
# 444 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'ID)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 67 "Parser.fsy"
                                 Statements.SetContext _2 
                   )
# 67 "Parser.fsy"
                 : 'SetValue));
# 455 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'ID)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'ID)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 68 "Parser.fsy"
                                    Statements.SetValue(None, _2, _3) 
                   )
# 68 "Parser.fsy"
                 : 'SetValue));
# 467 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'ID)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'ID)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'ID)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 69 "Parser.fsy"
                                       Statements.SetValue(Some _2, _3, _4) 
                   )
# 69 "Parser.fsy"
                 : 'SetValue));
# 480 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'ID)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'ID)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : int)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 70 "Parser.fsy"
                                           Statements.AddValue(Some _2, _3, _4) 
                   )
# 70 "Parser.fsy"
                 : 'SetValue));
# 493 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'ID)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : int)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 71 "Parser.fsy"
                                        Statements.AddValue(None, _2, _3) 
                   )
# 71 "Parser.fsy"
                 : 'SetValue));
# 505 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'ID)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'ID)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : int)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 72 "Parser.fsy"
                                           Statements.AddValue(Some _2, _3, -_4) 
                   )
# 72 "Parser.fsy"
                 : 'SetValue));
# 518 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'ID)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : int)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 73 "Parser.fsy"
                                        Statements.AddValue(None, _2, -_3) 
                   )
# 73 "Parser.fsy"
                 : 'SetValue));
# 530 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'ID)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 76 "Parser.fsy"
                                   Statements.PrintValues (Some _2, None) 
                   )
# 76 "Parser.fsy"
                 : 'PrintValue));
# 541 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'ID)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'ID)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 77 "Parser.fsy"
                                      Statements.PrintValues (Some _2, Some _3) 
                   )
# 77 "Parser.fsy"
                 : 'PrintValue));
# 553 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 78 "Parser.fsy"
                                Statements.PrintValues(None, None) 
                   )
# 78 "Parser.fsy"
                 : 'PrintValue));
# 563 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : int)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'MaybeTest)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 81 "Parser.fsy"
                                               Statements.Repeat(_1, _3) 
                   )
# 81 "Parser.fsy"
                 : 'MultiRoll));
# 575 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'MaybeTest)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 82 "Parser.fsy"
                                    _1 
                   )
# 82 "Parser.fsy"
                 : 'MultiRoll));
# 586 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Roll)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 85 "Parser.fsy"
                               Statements.Simple _1 
                   )
# 85 "Parser.fsy"
                 : 'MaybeTest));
# 597 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Roll)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : int)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 86 "Parser.fsy"
                                                   Statements.AtLeast(Statements.Simple (_1), _3, 20) 
                   )
# 86 "Parser.fsy"
                 : 'MaybeTest));
# 609 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Roll)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : int)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : int)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 87 "Parser.fsy"
                                                                               Statements.AtLeast(Statements.Simple (_1), _3, _5) 
                   )
# 87 "Parser.fsy"
                 : 'MaybeTest));
# 622 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'PlusList)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 90 "Parser.fsy"
                                   _1 
                   )
# 90 "Parser.fsy"
                 : 'Roll));
# 633 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'RollList)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 91 "Parser.fsy"
                                       Statements.Min(_2) 
                   )
# 91 "Parser.fsy"
                 : 'Roll));
# 644 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'RollList)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 92 "Parser.fsy"
                                       Statements.Max(_2) 
                   )
# 92 "Parser.fsy"
                 : 'Roll));
# 655 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'SimpleRoll)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'RollList)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 95 "Parser.fsy"
                                                    List.append [_1] _3 
                   )
# 95 "Parser.fsy"
                 : 'RollList));
# 667 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'SimpleRoll)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 96 "Parser.fsy"
                                     [_1] 
                   )
# 96 "Parser.fsy"
                 : 'RollList));
# 678 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'SimpleRoll)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 99 "Parser.fsy"
                                     _1 
                   )
# 99 "Parser.fsy"
                 : 'PlusList));
# 689 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'SimpleRoll)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'PlusList)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 100 "Parser.fsy"
                                                   Statements.MakeSum(_1, _3) 
                   )
# 100 "Parser.fsy"
                 : 'PlusList));
# 701 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'SimpleRoll)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'PlusList)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 101 "Parser.fsy"
                                                    Statements.MakeSubtract(_1, _3) 
                   )
# 101 "Parser.fsy"
                 : 'PlusList));
# 713 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : int)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 104 "Parser.fsy"
                                      Statements.Roll(0, 0, _1) 
                   )
# 104 "Parser.fsy"
                 : 'SimpleRoll));
# 724 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : int)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 105 "Parser.fsy"
                                            Statements.Roll(_1, 6, 0) 
                   )
# 105 "Parser.fsy"
                 : 'SimpleRoll));
# 735 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : int)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : int)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 106 "Parser.fsy"
                                                  Statements.Roll(_1, _3, 0) 
                   )
# 106 "Parser.fsy"
                 : 'SimpleRoll));
# 747 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : int)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 107 "Parser.fsy"
                                                Statements.Roll(1, _2, 0) 
                   )
# 107 "Parser.fsy"
                 : 'SimpleRoll));
# 758 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'SimpleRoll)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 108 "Parser.fsy"
                                                   Statements.Max [_1; _1] 
                   )
# 108 "Parser.fsy"
                 : 'SimpleRoll));
# 769 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'SimpleRoll)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 109 "Parser.fsy"
                                                     Statements.Min [_1; _1] 
                   )
# 109 "Parser.fsy"
                 : 'SimpleRoll));
|]
# 781 "Parser.fs"
let tables () : Microsoft.FSharp.Text.Parsing.Tables<_> = 
  { reductions= _fsyacc_reductions ();
    endOfInputTag = _fsyacc_endOfInputTag;
    tagOfToken = tagOfToken;
    dataOfToken = _fsyacc_dataOfToken; 
    actionTableElements = _fsyacc_actionTableElements;
    actionTableRowOffsets = _fsyacc_actionTableRowOffsets;
    stateToProdIdxsTableElements = _fsyacc_stateToProdIdxsTableElements;
    stateToProdIdxsTableRowOffsets = _fsyacc_stateToProdIdxsTableRowOffsets;
    reductionSymbolCounts = _fsyacc_reductionSymbolCounts;
    immediateActions = _fsyacc_immediateActions;
    gotos = _fsyacc_gotos;
    sparseGotoTableRowOffsets = _fsyacc_sparseGotoTableRowOffsets;
    tagOfErrorTerminal = _fsyacc_tagOfErrorTerminal;
    parseError = (fun (ctxt:Microsoft.FSharp.Text.Parsing.ParseErrorContext<_>) -> 
                              match parse_error_rich with 
                              | Some f -> f ctxt
                              | None -> parse_error ctxt.Message);
    numTerminals = 29;
    productionToNonTerminalTable = _fsyacc_productionToNonTerminalTable  }
let engine lexer lexbuf startState = (tables ()).Interpret(lexer, lexbuf, startState)
let start lexer lexbuf :  Statements.Command  =
    Microsoft.FSharp.Core.Operators.unbox ((tables ()).Interpret(lexer, lexbuf, 0))
