// Implementation file for parser generated by fsyacc
module Parser
#nowarn "64";; // turn off warnings that type variables used in production annotations are instantiated to concrete type
open Microsoft.FSharp.Text.Lexing
open Microsoft.FSharp.Text.Parsing.ParseHelpers
# 1 "Parser.fsy"




# 11 "Parser.fs"
// This type is the type of tokens accepted by the parser
type token = 
  | QuestionMark
  | CloseParen
  | OpenParen
  | Comma
  | Disadvantage
  | Advantage
  | Max
  | Min
  | Dot
  | Minus
  | Plus
  | DSymbol
  | Number of (int)
  | EOF
// This type is used to give symbolic names to token indexes, useful for error messages
type tokenId = 
    | TOKEN_QuestionMark
    | TOKEN_CloseParen
    | TOKEN_OpenParen
    | TOKEN_Comma
    | TOKEN_Disadvantage
    | TOKEN_Advantage
    | TOKEN_Max
    | TOKEN_Min
    | TOKEN_Dot
    | TOKEN_Minus
    | TOKEN_Plus
    | TOKEN_DSymbol
    | TOKEN_Number
    | TOKEN_EOF
    | TOKEN_end_of_input
    | TOKEN_error
// This type is used to give symbolic names to token indexes, useful for error messages
type nonTerminalId = 
    | NONTERM__startstart
    | NONTERM_start
    | NONTERM_Roll
    | NONTERM_PlusList
    | NONTERM_RollList
    | NONTERM_SimpleRoll

// This function maps tokens to integer indexes
let tagOfToken (t:token) = 
  match t with
  | QuestionMark  -> 0 
  | CloseParen  -> 1 
  | OpenParen  -> 2 
  | Comma  -> 3 
  | Disadvantage  -> 4 
  | Advantage  -> 5 
  | Max  -> 6 
  | Min  -> 7 
  | Dot  -> 8 
  | Minus  -> 9 
  | Plus  -> 10 
  | DSymbol  -> 11 
  | Number _ -> 12 
  | EOF  -> 13 

// This function maps integer indexes to symbolic token ids
let tokenTagToTokenId (tokenIdx:int) = 
  match tokenIdx with
  | 0 -> TOKEN_QuestionMark 
  | 1 -> TOKEN_CloseParen 
  | 2 -> TOKEN_OpenParen 
  | 3 -> TOKEN_Comma 
  | 4 -> TOKEN_Disadvantage 
  | 5 -> TOKEN_Advantage 
  | 6 -> TOKEN_Max 
  | 7 -> TOKEN_Min 
  | 8 -> TOKEN_Dot 
  | 9 -> TOKEN_Minus 
  | 10 -> TOKEN_Plus 
  | 11 -> TOKEN_DSymbol 
  | 12 -> TOKEN_Number 
  | 13 -> TOKEN_EOF 
  | 16 -> TOKEN_end_of_input
  | 14 -> TOKEN_error
  | _ -> failwith "tokenTagToTokenId: bad token"

/// This function maps production indexes returned in syntax errors to strings representing the non terminal that would be produced by that production
let prodIdxToNonTerminal (prodIdx:int) = 
  match prodIdx with
    | 0 -> NONTERM__startstart 
    | 1 -> NONTERM_start 
    | 2 -> NONTERM_Roll 
    | 3 -> NONTERM_Roll 
    | 4 -> NONTERM_Roll 
    | 5 -> NONTERM_Roll 
    | 6 -> NONTERM_Roll 
    | 7 -> NONTERM_Roll 
    | 8 -> NONTERM_PlusList 
    | 9 -> NONTERM_PlusList 
    | 10 -> NONTERM_RollList 
    | 11 -> NONTERM_RollList 
    | 12 -> NONTERM_SimpleRoll 
    | 13 -> NONTERM_SimpleRoll 
    | 14 -> NONTERM_SimpleRoll 
    | 15 -> NONTERM_SimpleRoll 
    | 16 -> NONTERM_SimpleRoll 
    | 17 -> NONTERM_SimpleRoll 
    | 18 -> NONTERM_SimpleRoll 
    | 19 -> NONTERM_SimpleRoll 
    | 20 -> NONTERM_SimpleRoll 
    | 21 -> NONTERM_SimpleRoll 
    | 22 -> NONTERM_SimpleRoll 
    | 23 -> NONTERM_SimpleRoll 
    | _ -> failwith "prodIdxToNonTerminal: bad production index"

let _fsyacc_endOfInputTag = 16 
let _fsyacc_tagOfErrorTerminal = 14

// This function gets the name of a token as a string
let token_to_string (t:token) = 
  match t with 
  | QuestionMark  -> "QuestionMark" 
  | CloseParen  -> "CloseParen" 
  | OpenParen  -> "OpenParen" 
  | Comma  -> "Comma" 
  | Disadvantage  -> "Disadvantage" 
  | Advantage  -> "Advantage" 
  | Max  -> "Max" 
  | Min  -> "Min" 
  | Dot  -> "Dot" 
  | Minus  -> "Minus" 
  | Plus  -> "Plus" 
  | DSymbol  -> "DSymbol" 
  | Number _ -> "Number" 
  | EOF  -> "EOF" 

// This function gets the data carried by a token as an object
let _fsyacc_dataOfToken (t:token) = 
  match t with 
  | QuestionMark  -> (null : System.Object) 
  | CloseParen  -> (null : System.Object) 
  | OpenParen  -> (null : System.Object) 
  | Comma  -> (null : System.Object) 
  | Disadvantage  -> (null : System.Object) 
  | Advantage  -> (null : System.Object) 
  | Max  -> (null : System.Object) 
  | Min  -> (null : System.Object) 
  | Dot  -> (null : System.Object) 
  | Minus  -> (null : System.Object) 
  | Plus  -> (null : System.Object) 
  | DSymbol  -> (null : System.Object) 
  | Number _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | EOF  -> (null : System.Object) 
let _fsyacc_gotos = [| 0us; 65535us; 1us; 65535us; 0us; 1us; 2us; 65535us; 0us; 2us; 7us; 8us; 3us; 65535us; 0us; 5us; 7us; 5us; 16us; 17us; 3us; 65535us; 9us; 10us; 11us; 12us; 19us; 20us; 6us; 65535us; 0us; 4us; 7us; 4us; 9us; 18us; 11us; 18us; 16us; 15us; 19us; 18us; |]
let _fsyacc_sparseGotoTableRowOffsets = [|0us; 1us; 3us; 6us; 10us; 14us; |]
let _fsyacc_stateToProdIdxsTableElements = [| 1us; 0us; 1us; 0us; 2us; 1us; 7us; 1us; 1us; 5us; 2us; 8us; 9us; 22us; 23us; 1us; 3us; 8us; 4us; 12us; 13us; 15us; 16us; 18us; 19us; 21us; 1us; 4us; 2us; 4us; 7us; 1us; 5us; 1us; 5us; 1us; 6us; 1us; 6us; 1us; 7us; 1us; 7us; 4us; 8us; 9us; 22us; 23us; 1us; 8us; 1us; 8us; 4us; 10us; 11us; 22us; 23us; 1us; 10us; 1us; 10us; 7us; 12us; 13us; 15us; 16us; 18us; 19us; 21us; 7us; 12us; 13us; 15us; 16us; 18us; 19us; 21us; 4us; 13us; 15us; 16us; 19us; 3us; 14us; 17us; 20us; 3us; 14us; 17us; 20us; 1us; 16us; 1us; 16us; 1us; 17us; 1us; 17us; 1us; 18us; 1us; 18us; 1us; 19us; 1us; 19us; 1us; 20us; 1us; 20us; 1us; 21us; 1us; 21us; 1us; 22us; 1us; 23us; |]
let _fsyacc_stateToProdIdxsTableRowOffsets = [|0us; 2us; 4us; 7us; 9us; 15us; 17us; 26us; 28us; 31us; 33us; 35us; 37us; 39us; 41us; 43us; 48us; 50us; 52us; 57us; 59us; 61us; 69us; 77us; 82us; 86us; 90us; 92us; 94us; 96us; 98us; 100us; 102us; 104us; 106us; 108us; 110us; 112us; 114us; 116us; |]
let _fsyacc_action_rows = 40
let _fsyacc_actionTableElements = [|4us; 32768us; 6us; 11us; 7us; 9us; 11us; 24us; 12us; 6us; 0us; 49152us; 2us; 32768us; 0us; 13us; 13us; 3us; 0us; 16385us; 3us; 16386us; 4us; 39us; 5us; 38us; 10us; 16us; 0us; 16387us; 2us; 32768us; 8us; 7us; 11us; 22us; 4us; 32768us; 6us; 11us; 7us; 9us; 11us; 24us; 12us; 6us; 1us; 16388us; 0us; 13us; 2us; 32768us; 11us; 24us; 12us; 21us; 0us; 16389us; 2us; 32768us; 11us; 24us; 12us; 21us; 0us; 16390us; 1us; 32768us; 12us; 14us; 0us; 16391us; 3us; 16393us; 4us; 39us; 5us; 38us; 10us; 16us; 2us; 32768us; 11us; 24us; 12us; 21us; 0us; 16392us; 3us; 16395us; 3us; 19us; 4us; 39us; 5us; 38us; 2us; 32768us; 11us; 24us; 12us; 21us; 0us; 16394us; 1us; 32768us; 11us; 22us; 3us; 16396us; 9us; 36us; 10us; 30us; 12us; 23us; 2us; 16397us; 9us; 32us; 10us; 26us; 1us; 32768us; 12us; 25us; 2us; 16398us; 9us; 34us; 10us; 28us; 1us; 32768us; 12us; 27us; 0us; 16400us; 1us; 32768us; 12us; 29us; 0us; 16401us; 1us; 32768us; 12us; 31us; 0us; 16402us; 1us; 32768us; 12us; 33us; 0us; 16403us; 1us; 32768us; 12us; 35us; 0us; 16404us; 1us; 32768us; 12us; 37us; 0us; 16405us; 0us; 16406us; 0us; 16407us; |]
let _fsyacc_actionTableRowOffsets = [|0us; 5us; 6us; 9us; 10us; 14us; 15us; 18us; 23us; 25us; 28us; 29us; 32us; 33us; 35us; 36us; 40us; 43us; 44us; 48us; 51us; 52us; 54us; 58us; 61us; 63us; 66us; 68us; 69us; 71us; 72us; 74us; 75us; 77us; 78us; 80us; 81us; 83us; 84us; 85us; |]
let _fsyacc_reductionSymbolCounts = [|1us; 2us; 1us; 1us; 3us; 2us; 2us; 3us; 3us; 1us; 3us; 1us; 2us; 3us; 2us; 3us; 5us; 4us; 4us; 5us; 4us; 4us; 2us; 2us; |]
let _fsyacc_productionToNonTerminalTable = [|0us; 1us; 2us; 2us; 2us; 2us; 2us; 2us; 3us; 3us; 4us; 4us; 5us; 5us; 5us; 5us; 5us; 5us; 5us; 5us; 5us; 5us; 5us; 5us; |]
let _fsyacc_immediateActions = [|65535us; 49152us; 65535us; 16385us; 65535us; 16387us; 65535us; 65535us; 65535us; 65535us; 16389us; 65535us; 16390us; 65535us; 16391us; 65535us; 65535us; 16392us; 65535us; 65535us; 16394us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16400us; 65535us; 16401us; 65535us; 16402us; 65535us; 16403us; 65535us; 16404us; 65535us; 16405us; 16406us; 16407us; |]
let _fsyacc_reductions ()  =    [| 
# 172 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data :  Rolls.RollSpec )) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                      raise (Microsoft.FSharp.Text.Parsing.Accept(Microsoft.FSharp.Core.Operators.box _1))
                   )
                 : '_startstart));
# 181 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Roll)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 34 "Parser.fsy"
                                       _1 
                   )
# 34 "Parser.fsy"
                 :  Rolls.RollSpec ));
# 192 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'SimpleRoll)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 37 "Parser.fsy"
                                     _1 
                   )
# 37 "Parser.fsy"
                 : 'Roll));
# 203 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'PlusList)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 38 "Parser.fsy"
                                   Rolls.Sum(_1) 
                   )
# 38 "Parser.fsy"
                 : 'Roll));
# 214 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : int)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Roll)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 39 "Parser.fsy"
                                          Rolls.Repeat(_1, _3) 
                   )
# 39 "Parser.fsy"
                 : 'Roll));
# 226 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'RollList)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 40 "Parser.fsy"
                                       Rolls.Min(_2) 
                   )
# 40 "Parser.fsy"
                 : 'Roll));
# 237 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'RollList)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 41 "Parser.fsy"
                                       Rolls.Max(_2) 
                   )
# 41 "Parser.fsy"
                 : 'Roll));
# 248 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Roll)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : int)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 42 "Parser.fsy"
                                                   Rolls.AtLeast(_1, _3) 
                   )
# 42 "Parser.fsy"
                 : 'Roll));
# 260 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'SimpleRoll)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'PlusList)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 45 "Parser.fsy"
                                                   List.append [_1] _3 
                   )
# 45 "Parser.fsy"
                 : 'PlusList));
# 272 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'SimpleRoll)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 46 "Parser.fsy"
                                     [_1] 
                   )
# 46 "Parser.fsy"
                 : 'PlusList));
# 283 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'SimpleRoll)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'RollList)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 49 "Parser.fsy"
                                                    List.append [_1] _3 
                   )
# 49 "Parser.fsy"
                 : 'RollList));
# 295 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'SimpleRoll)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 50 "Parser.fsy"
                                     [_1] 
                   )
# 50 "Parser.fsy"
                 : 'RollList));
# 306 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : int)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 53 "Parser.fsy"
                                            Rolls.Roll(_1, 6, 0) 
                   )
# 53 "Parser.fsy"
                 : 'SimpleRoll));
# 317 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : int)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : int)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 54 "Parser.fsy"
                                                Rolls.Roll(_1, _3, 0) 
                   )
# 54 "Parser.fsy"
                 : 'SimpleRoll));
# 329 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : int)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 55 "Parser.fsy"
                                                Rolls.Roll(1, _2, 0) 
                   )
# 55 "Parser.fsy"
                 : 'SimpleRoll));
# 340 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : int)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : int)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 56 "Parser.fsy"
                                                  Rolls.Roll(_1, 6, _3) 
                   )
# 56 "Parser.fsy"
                 : 'SimpleRoll));
# 352 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : int)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : int)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : int)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 57 "Parser.fsy"
                                                             Rolls.Roll(_1, _3, _5) 
                   )
# 57 "Parser.fsy"
                 : 'SimpleRoll));
# 365 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : int)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : int)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 58 "Parser.fsy"
                                                       Rolls.Roll(1, _2, _4) 
                   )
# 58 "Parser.fsy"
                 : 'SimpleRoll));
# 377 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : int)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : int)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 59 "Parser.fsy"
                                                       Rolls.Roll(_1, 6, _4) 
                   )
# 59 "Parser.fsy"
                 : 'SimpleRoll));
# 389 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : int)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : int)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : int)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 60 "Parser.fsy"
                                                              Rolls.Roll(_1, _3, -_5) 
                   )
# 60 "Parser.fsy"
                 : 'SimpleRoll));
# 402 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : int)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : int)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 61 "Parser.fsy"
                                                        Rolls.Roll(1, _2, -_4) 
                   )
# 61 "Parser.fsy"
                 : 'SimpleRoll));
# 414 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : int)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : int)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 62 "Parser.fsy"
                                                        Rolls.Roll(_1, 6, -_4) 
                   )
# 62 "Parser.fsy"
                 : 'SimpleRoll));
# 426 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'SimpleRoll)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 63 "Parser.fsy"
                                                   Rolls.Max [_1; _1] 
                   )
# 63 "Parser.fsy"
                 : 'SimpleRoll));
# 437 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'SimpleRoll)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 64 "Parser.fsy"
                                                     Rolls.Min [_1; _1] 
                   )
# 64 "Parser.fsy"
                 : 'SimpleRoll));
|]
# 449 "Parser.fs"
let tables () : Microsoft.FSharp.Text.Parsing.Tables<_> = 
  { reductions= _fsyacc_reductions ();
    endOfInputTag = _fsyacc_endOfInputTag;
    tagOfToken = tagOfToken;
    dataOfToken = _fsyacc_dataOfToken; 
    actionTableElements = _fsyacc_actionTableElements;
    actionTableRowOffsets = _fsyacc_actionTableRowOffsets;
    stateToProdIdxsTableElements = _fsyacc_stateToProdIdxsTableElements;
    stateToProdIdxsTableRowOffsets = _fsyacc_stateToProdIdxsTableRowOffsets;
    reductionSymbolCounts = _fsyacc_reductionSymbolCounts;
    immediateActions = _fsyacc_immediateActions;
    gotos = _fsyacc_gotos;
    sparseGotoTableRowOffsets = _fsyacc_sparseGotoTableRowOffsets;
    tagOfErrorTerminal = _fsyacc_tagOfErrorTerminal;
    parseError = (fun (ctxt:Microsoft.FSharp.Text.Parsing.ParseErrorContext<_>) -> 
                              match parse_error_rich with 
                              | Some f -> f ctxt
                              | None -> parse_error ctxt.Message);
    numTerminals = 17;
    productionToNonTerminalTable = _fsyacc_productionToNonTerminalTable  }
let engine lexer lexbuf startState = (tables ()).Interpret(lexer, lexbuf, startState)
let start lexer lexbuf :  Rolls.RollSpec  =
    Microsoft.FSharp.Core.Operators.unbox ((tables ()).Interpret(lexer, lexbuf, 0))
