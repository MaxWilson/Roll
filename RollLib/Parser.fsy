%{


%}

// The start token becomes a parser function in the compiled code:
%start start

// Misc tokens
%token EOF

%token <int> Number
%token DSymbol
%token Plus
%token Minus
%token Dot
%token Min
%token Max
%token Advantage
%token Disadvantage
%token Comma
%token OpenParen
%token CloseParen
%token QuestionMark
%token Quit
%token Set
%token Print
%token Add
%token Sub
%token Declare
%token Resolve
%token Delay
%token Kill
%token Delete
%token Load
%token Save
%token ResolveWith
%token Log
%token Slash
%token Star
%token Whitespace
%token <string> Ident
%token <string> String

// This is the type of the data produced by a successful reduction of the 'start'
// symbol:
%type < Statements.Command > start

%%

// These are the rules of the grammar along with the F# code of the 
// actions executed as rules are reduced.  
start: Command EOF { $1 }

Command:
	| MultiRoll { Statements.RollCommand($1) }
	| Quit { Statements.QuitCommand }
	| SetValue { $1 }
	| PrintValue { $1 }
	| Delay { Statements.Delay None }
	| Delay ID { Statements.Delay (Some $2) }
	| Declare ID { Statements.SetValue(None, "action", $2) }
	| Declare ID ID { Statements.SetValue(Some $2, "action", $3) }
	| Resolve { Statements.ResolveAction(None, None) }
	| Resolve ID { Statements.ResolveAction(None, Some $2) }
	| ResolveWith ID { Statements.ResolveAction(None, Some $2) }
	| ResolveWith ID ID { Statements.ResolveAction(Some $2, Some $3) }
	| Log ID { Statements.Log(None, $2) }
	| Log ID ID { Statements.Log(Some $2, $3) }
	| Kill ID { Statements.Delete(Some $2, None) }
	| Delete ID { Statements.Delete(None, Some $2) }
	| Delete ID ID { Statements.Delete(Some $2, Some $3) }
	| Load ID { Statements.Load $2 }
	| Save ID { Statements.Save $2 }

SetValue:
	| Set ID { Statements.SetContext $2 }
	| Set ID ID { Statements.SetValue(None, $2, $3) }
	| Set ID Whitespace Number { Statements.SetValue(None, $2, $4.ToString()) }
	| Set ID ID ID { Statements.SetValue(Some $2, $3, $4) }
	| Set ID ID Whitespace Number { Statements.SetValue(Some $2, $3, $5.ToString()) }
	| Add ID RWSNumber { Statements.AddValue(None, $2, $3) }
	| Add ID ID RWSNumber { Statements.AddValue(Some $2, $3, $4) }
	| Sub ID RWSNumber { Statements.AddValue(None, $2, -$3) }
	| Sub ID ID RWSNumber { Statements.AddValue(Some $2, $3, -$4) }
	
PrintValue:
	| Print ID { Statements.PrintValues (Some $2, None) }
	| Print ID ID { Statements.PrintValues (Some $2, Some $3) }
	| Print { Statements.PrintValues(None, None) }
	
MultiRoll:
	| Number Dot MaybeTest { Statements.Repeat($1, $3) }
	| MaybeTest { $1 }

MaybeTest:
	| Roll { Statements.Simple $1 }
	| Roll QuestionMark Number { Statements.AtLeast(Statements.Simple ($1), $3, 20) }
	| Roll QuestionMark Number OpenParen Number CloseParen { Statements.AtLeast(Statements.Simple ($1), $3, $5) }
	
Roll:
	| MultList { $1 }
	| Min RollList { Statements.Min($2) }
	| Max RollList { Statements.Max($2) }
	
MultList:
	| PlusList { $1 }
	| PlusList Star Number { Statements.Times($1, $3) }
	| PlusList Slash Number { Statements.Divide($1, $3) }

RollList:
	| Whitespace RollList { $2 }
	| SimpleRoll OWSComma RollList { List.append [$1] $3 }
	| SimpleRoll { [$1] }

PlusList:
	| Whitespace PlusList { $2 }
	| SimpleRoll { $1 }
	| SimpleRoll OWSPlus PlusList { Statements.MakeSum($1, $3) }
	| SimpleRoll OWSMinus PlusList { Statements.MakeSubtract($1, $3) }

SimpleRoll:
	| Number						{ Statements.Roll(0, 0, $1) }
	| Number DSymbol				{ Statements.Roll($1, 6, 0) }
	| Number DSymbol Number			{ Statements.Roll($1, $3, 0) }
	| DSymbol Number 			    { Statements.Roll(1, $2, 0) }
	| SimpleRoll Advantage					{ Statements.Max [$1; $1] }
	| SimpleRoll Disadvantage				{ Statements.Min [$1; $1] }
	
RWSNumber: Whitespace Number { $2 }
OWSComma: Comma { () } | Whitespace Comma { () }
OWSPlus: Plus { () } | Whitespace Plus { () }
OWSMinus: Minus { () } | Whitespace Minus { () }

ID:
	| Ident { $1 }
	| Whitespace Ident { $2 }
	| Ident Number { $1 + ($2.ToString()) }
	| Whitespace Ident Number { $2 + ($3.ToString()) }
	| String { $1 }
	| Whitespace String { $2 }


